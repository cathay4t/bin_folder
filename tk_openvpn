#!/usr/bin/perl -w
#Copyright (C) 2012  Gris Ge <cnfourt@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use Expect;
use Sys::Syslog;

my $HOME = "/home/fge";
my $tmo  = undef;
my $openvpn_conf = $ARGV[0] if defined $ARGV[0];
my $MAX_RETRY=2;
my $DEFAULT_CONF='/etc/openvpn/default.conf';
my $username = 'fge';
my $pass_gen_cmd = "$HOME/bin/pytoken";
my $pin_file = "$HOME/.passwd/.rh_pin";
my $flag_ok = 0;
my $openvpn;
my $post_vpn_cmd = "$HOME/bin/post_vpn";

sub main {
    system('sudo killall openvpn');
    my $exp = new Expect;
    $exp->log_stdout(1);
    my $command = 'sudo openvpn --config ';
    if (defined $openvpn_conf){
        $command .= " $openvpn_conf";
    }else{
        $command .= " $DEFAULT_CONF";
    }
    $exp->spawn($command)
      or die "FAIL: Cannot spawn command $command\n";
    my $flag_retry = 0;
    $exp->expect(
        $tmo,
        [
            qr/Enter Auth Username:/,
            sub {
                my $exp = shift;
                if ($flag_retry >= $MAX_RETRY){
                    print "FAIL: Max retry exceeded, quiting\n";
                    exit 1;
                }
                $flag_retry += 1;
                $exp->send("$username\n");
                exp_continue;
            },
        ],
        [
            qr/Enter Auth Password:/,
            sub {
                my $exp = shift;
                my $token = `$pass_gen_cmd`;
                my $pin  = `cat $pin_file`;
                chomp $pin;
                chomp $token;
                $exp->send("$pin$token\n");
                exp_continue;
            },
        ],
        [
            qr/Initialization Sequence Completed/,
            sub {
                my $exp = shift;
                $flag_ok = 1;
                openlog('tk_openvpn', 'ndelay,pid', 'local0');
                syslog('info', "INFO: OpenVPN connected\n");
                system($post_vpn_cmd);
                closelog();
                $exp->expect(undef);
            }
        ],
    );
    $exp->hard_close();
    clean_up();
}

sub clean_up(){
    system('sudo killall openvpn');
    1;
}

main();

if ($flag_ok == 1){
    while(1){
        openlog('tk_openvpn', 'ndelay,pid', 'local0');
        syslog('info', "INFO: Reconnecting OpenVPN\n");
        closelog();
        main();
        exit unless $flag_ok;
    }
}
